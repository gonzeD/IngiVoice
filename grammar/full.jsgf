#JSGF V1.0;
grammar base;
public <single_input> = endLine | <simple_stmt> | <compound_stmt> endLine ;
<file_input> = ( endLine | <stmt> ) * ;
<eval_input> = <testlist> endLine * ;
<decorator> = at <dotted_name> [ openParenthesis [ <arglist> ] closeParenthesis ] endLine ;
<decorators> = <decorator> + ;
<decorated> = <decorators> ( <classdef> | <funcdef> | <async_funcdef> ) ;
<async_funcdef> = async <funcdef> ;
<funcdef> = def variable <parameters> [ arrow <test> ] colon [ type_comment ] <func_body_suite> ;
<parameters> = openParenthesis [ <typedargslist> ] closeParenthesis ;
<typedargslist> = (
    ( <tfpdef> [ equal <test> ] ( comma [ type_comment ] <tfpdef> [ equal <test> ] ) * comma [ type_comment ] divide [ comma [ [ type_comment ] <tfpdef> [ equal <test> ] (
    comma [ type_comment ] <tfpdef> [ equal <test> ] ) * ( type_comment | [ comma [ type_comment ] [
    multiply [ <tfpdef> ] ( comma [ type_comment ] <tfpdef> [ equal <test> ] ) * ( type_comment | [ comma [ type_comment ] [ pow <tfpdef> [ comma ] [ type_comment ] ] ] )
    | pow <tfpdef> [ comma ] [ type_comment ] ] ] )
    | multiply [ <tfpdef> ] ( comma [ type_comment ] <tfpdef> [ equal <test> ] ) * ( type_comment | [ comma [ type_comment ] [ pow <tfpdef> [ comma ] [ type_comment ] ] ] )
    | pow <tfpdef> [ comma ] [ type_comment ] ] ] )
    | ( <tfpdef> [ equal <test> ] ( comma [ type_comment ] <tfpdef> [ equal <test> ] ) * ( type_comment | [ comma [ type_comment ] [
    multiply [ <tfpdef> ] ( comma [ type_comment ] <tfpdef> [ equal <test> ] ) * ( type_comment | [ comma [ type_comment ] [ pow <tfpdef> [ comma ] [ type_comment ] ] ] )
    | pow <tfpdef> [ comma ] [ type_comment ] ] ] )
    | multiply [ <tfpdef> ] ( comma [ type_comment ] <tfpdef> [ equal <test> ] ) * ( type_comment | [ comma [ type_comment ] [ pow <tfpdef> [ comma ] [ type_comment ] ] ] )
    | pow <tfpdef> [ comma ] [ type_comment ] )
) ;
<tfpdef> = variable [ colon <test> ] ;
<varargslist> = <vfpdef> [ equal <test> ] ( comma <vfpdef> [ equal <test> ] ) * comma divide [ comma [ ( <vfpdef> [ equal    <test> ] ( comma <vfpdef> [ equal <test> ] ) * [ comma [
    multiply [ <vfpdef> ] ( comma <vfpdef> [ equal <test> ] ) * [ comma [ pow <vfpdef> [ comma ] ] ]
    | pow <vfpdef> [ comma ] ] ]
    | multiply [ <vfpdef> ] ( comma <vfpdef> [ equal <test> ] ) * [ comma [ pow <vfpdef> [ comma ] ] ]
    | pow <vfpdef> [ comma ] ) ] ] | ( <vfpdef> [ equal <test> ] ( comma <vfpdef> [ equal <test> ] ) * [ comma [
    multiply [ <vfpdef> ] ( comma <vfpdef> [ equal <test> ] ) * [ comma [ pow <vfpdef> [ comma ] ] ]
    | pow <vfpdef> [ comma ] ] ]
    | multiply [ <vfpdef> ] ( comma <vfpdef> [ equal <test> ] ) * [ comma [ pow <vfpdef> [ comma ] ] ]
    | pow <vfpdef> [ comma ]
) ;
<vfpdef> = variable ;
<stmt> = <simple_stmt> | <compound_stmt> ;
<simple_stmt> = <small_stmt> ( semicolon <small_stmt> ) * [ semicolon ] endLine ;
<small_stmt> = ( <expr_stmt> | <del_stmt> | <pass_stmt> | <flow_stmt> |
    <import_stmt> | <global_stmt> | <nonlocal_stmt> | <assert_stmt> ) ;
<expr_stmt> = <testlist_star_expr> ( <annassign> | <augassign> ( <yield_expr> | <testlist> ) |
    [ ( equal ( <yield_expr> | <testlist_star_expr> ) ) + [ type_comment ] ] ) ;
<annassign> = colon <test> [ equal ( <yield_expr> | <testlist_star_expr> ) ] ;
<testlist_star_expr> = ( <test> | <star_expr> ) ( comma ( <test> | <star_expr> ) ) * [ comma ] ;
<augassign> = ( equalPlus | equalMinus | equalMultiply | equalAt | equalDivide | equalModulo | equalBinaryAnd | equalBinaryOr | equalBinaryXor |
    equalLeftShift | equalRightShift | equalPow | equalDivideEuclidian ) ;
<del_stmt> = del <exprlist> ;
<pass_stmt> = pass ;
<flow_stmt> = <break_stmt> | <continue_stmt> | <return_stmt> | <raise_stmt> | <yield_stmt> ;
<break_stmt> = break ;
<continue_stmt> = continue ;
<return_stmt> = return [ <testlist_star_expr> ] ;
<yield_stmt> = <yield_expr> ;
<raise_stmt> = raise [ <test> [ from <test> ] ] ;
<import_stmt> = <import_name> | <import_from> ;
<import_name> = import <dotted_as_names> ;
<import_from> = ( from ( ( dot | threeDot ) * <dotted_name> | ( dot | threeDot ) + )
    import ( multiply | openParenthesis <import_as_names> closeParenthesis | <import_as_names> ) ) ;
<import_as_name> = variable [ as variable ] ;
<dotted_as_name> = <dotted_name> [ as variable ] ;
<import_as_names> = <import_as_name> ( comma <import_as_name> ) * [ comma ] ;
<dotted_as_names> = <dotted_as_name> ( comma <dotted_as_name> ) * ;
<dotted_name> = variable ( dot variable ) * ;
<global_stmt> = global variable ( comma variable ) * ;
<nonlocal_stmt> = nonlocal variable ( comma variable ) * ;
<assert_stmt> = assert <test> [ comma <test> ] ;
<compound_stmt> = <if_stmt> | <while_stmt> | <for_stmt> | <try_stmt> | <with_stmt> | <funcdef> | <classdef> | <decorated> | <async_stmt> ;
<async_stmt> = async ( <funcdef> | <with_stmt> | <for_stmt> ) ;
<if_stmt> = if <namedexpr_test> colon <suite> ( elif <namedexpr_test> colon <suite> ) * [ else colon <suite> ] ;
<while_stmt> = while <namedexpr_test> colon <suite> [ else colon <suite> ] ;
<for_stmt> = for <exprlist> in <testlist> colon [ type_comment ] <suite> [ else colon <suite> ] ;
<try_stmt> = ( try colon <suite>
    ( ( <except_clause> colon <suite> ) +
    [ else colon <suite> ]
    [ finally colon <suite> ] |
    finally colon <suite> ) ) ;
<with_stmt> = with <with_item> ( comma <with_item> ) * colon [ type_comment ] <suite> ;
<with_item> = <test> [ as <expr> ] ;
<except_clause> = except [ <test> [ as variable ] ] ;
<suite> = <simple_stmt> | endLine indent <stmt> + dedent ;
<namedexpr_test> = <test> [ equalColon <test> ] ;
<test> = <or_test> [ if <or_test> else <test> ] | <lambdef> ;
<test_nocond> = <or_test> | <lambdef_nocond> ;
<lambdef> = lambda [ <varargslist> ] colon <test> ;
<lambdef_nocond> = lambda [ <varargslist> ] colon <test_nocond> ;
<or_test> = <and_test> ( or <and_test> ) * ;
<and_test> = <not_test> ( and <not_test> ) * ;
<not_test> = not <not_test> | <comparison> ;
<comparison> = <expr> ( <comp_op> <expr> ) * ;
<comp_op> = lowerThan | greaterThan | doubleEqual | greaterOrEqualThan | lowerOrEqualThan | airplane | different | i binaryOr <not'> i binaryOr <is> binaryOr <is'> not ;
<star_expr> = multiply <expr> ;
<expr> = <xor_expr> ( binaryOr <xor_expr> ) * ;
<xor_expr> = <and_expr> ( binaryXor <and_expr> ) * ;
<and_expr> = <shift_expr> ( binaryAnd <shift_expr> ) * ;
<shift_expr> = <arith_expr> ( ( leftShift | rightShift ) <arith_expr> ) * ;
<arith_expr> = <term> ( ( plus | minus ) <term> ) * ;
<term> = <factor> ( ( multiply | at | divide | modulo | divideEuclidian ) <factor> ) * ;
<factor> = ( plus | minus | tilde ) <factor> | <power> ;
<power> = <atom_expr> [ pow <factor> ] ;
<atom_expr> = [ await ] <atom> <trailer> * ;
<atom> = ( openParenthesis [ <yield_expr> | <testlist_comp> ] closeParenthesis |
    openBrackets [ <testlist_comp> ] closeBracketss |
    openCurly [ <dictorsetmaker> ] closeCurly |
    variable | number | string + | threeDot | None | True | False ) ;
<testlist_comp> = ( <namedexpr_test> | <star_expr> ) ( <comp_for> | ( comma ( <namedexpr_test> | <star_expr> ) ) * [ comma ] ) ;
<trailer> = openParenthesis [ <arglist> ] closeParenthesis | openBrackets <subscriptlist> closeBracketss | dot variable ;
<subscriptlist> = <subscript> ( comma <subscript> ) * [ comma ] ;
<subscript> = <test> | [ <test> ] colon [ <test> ] [ <sliceop> ] ;
<sliceop> = colon [ <test> ] ;
<exprlist> = ( <expr> | <star_expr> ) ( comma ( <expr> | <star_expr> ) ) * [ comma ] ;
<testlist> = <test> ( comma <test> ) * [ comma ] ;
<dictorsetmaker> = ( ( ( <test> colon <test> | pow <expr> )
    ( <comp_for> | ( comma ( <test> colon <test> | pow <expr> ) ) * [ comma ] ) ) |
    ( ( <test> | <star_expr> )
    ( <comp_for> | ( comma ( <test> | <star_expr> ) ) * [ comma ] ) ) ) ;
<classdef> = class variable [ openParenthesis [ <arglist> ] closeParenthesis ] colon <suite> ;
<arglist> = <argument> ( comma <argument> ) * [ comma ] ;
<argument> = ( <test> [ <comp_for> ] |
    <test> equalColon <test> |
    <test> equal <test> |
    pow <test> |
    multiply <test> ) ;
<comp_iter> = <comp_for> | <comp_if> ;
<sync_comp_for> = for <exprlist> in <or_test> [ <comp_iter> ] ;
<comp_for> = [ async ] <sync_comp_for> ;
<comp_if> = if <test_nocond> [ <comp_iter> ] ;
<encoding_decl> = variable ;
<yield_expr> = yield [ <yield_arg> ] ;
<yield_arg> = from <test> | <testlist_star_expr> ;
<func_body_suite> = <simple_stmt> | endLine [ type_comment endLine ] indent <stmt> + dedent ;
<func_type_input> = <func_type> endLine * ;
<func_type> = openParenthesis [ <typelist> ] closeParenthesis arrow <test> ;
<typelist> = ( <test> ( comma <test> ) * [ comma
    [ multiply [ <test> ] ( comma <test> ) * [ comma pow <test> ] | pow <test> ] ]
    | multiply [ <test> ] ( comma <test> ) * [ comma pow <test> ] | pow <test> ) ;
